{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","Watchman","isPlatformSupported","ProjectUtils","clearNotification","let","watchmanVersion","await","unblockAndGetVersionAsync","semver","lt","MIN_WATCHMAN_VERSION","warningMessage","process","platform","logWarning","_checkWatchmanVersionAsync","exp","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","Promise","all","map","fieldPath","schema","meta","asset","contentTypePattern","contentTypeHuman","value","_","get","filePath","path","resolve","contentType","fs","existsSync","fileType","readChunk","mime","request","promise","head","url","headers","match","RegExp","configName","configFilenameAsync","Config","helpUrl","e","message","_validateAssetFieldsAsync","pkg","FATAL","expJsonExists","fileExistsAsync","join","appJsonExists","WARNING","getSchemaAsync","validator","jsonschema","Validator","validationResult","validate","errors","length","fullMessage","error","stack","replace","dependencies","sdkVersions","Api","sdkVersionsAsync","keys","validation","reactNativeVersionWarnings","reactNative","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","NO_ISSUES","_validatePackageJsonAndExpJsonAsync","readConfigJsonAsync","nodeModulesPath","result","statSync","isDirectory","logError","isFile","Binaries","sourceBashLoginScriptsAsync","spawnAsync","npmls","npmlsCommand","cwd","stdout","npmlsDependencies","JSON","parse","errorStrings","forEach","versionRequired","dependency","installedDependency","version","peerMissing","push","satisfies","includes","from","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","allowNetwork","status","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","readFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs';\nimport jsonschema from 'jsonschema';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@exponent/spawn-async';\nimport readChunk from 'read-chunk';\nimport fileType from 'file-type';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const FATAL = 2;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nasync function _validateAssetFieldsAsync(projectRoot, exp) {\n  try {\n    const assetSchemas = await ExpSchema.getAssetSchemasAsync(exp.sdkVersion);\n    await Promise.all(assetSchemas.map(async ({\n      fieldPath,\n      schema: {\n        meta: { asset, contentTypePattern, contentTypeHuman },\n      },\n    }) => {\n      const value = _.get(exp, fieldPath);\n      if (asset && value) {\n        if (contentTypePattern) {\n          // NOTE(nikki): The '4100' below should be enough for most file types, though we\n          //              could probably go shorter....\n          //              http://www.garykessler.net/library/file_sigs.html\n          const filePath = path.resolve(projectRoot, value);\n          const contentType = fs.existsSync(filePath) ?\n                              fileType(await readChunk(filePath, 0, 4100)).mime :\n                              (await request.promise.head({ url: value })).headers['content-type'];\n          if (!contentType.match(new RegExp(contentTypePattern))) {\n            const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n            ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Problem in ${configName}. Field '${fieldPath}' should point to a ${contentTypeHuman}, but the file at '${value}' has type '${contentType}'. See ${Config.helpUrl}`,\n              `doctor-validate-asset-fields-${fieldPath}`);\n          } else {\n            ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields-${fieldPath}`);\n          }\n        }\n      }\n    }));\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-validate-asset-fields');\n  } catch (e) {\n    ProjectUtils.logWarning(projectRoot, 'expon', `Warning: Problem validating asset fields: ${e.message}.`, 'doctor-validate-asset-fields');\n  }\n}\n\nasync function _validatePackageJsonAndExpJsonAsync(exp, pkg, projectRoot): Promise<number>  {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Problem checking watchman version. ${e.message}.`, 'doctor-problem-checking-watchman-version');\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(path.join(projectRoot, 'exp.json'));\n  const appJsonExists = await ProjectUtils.fileExistsAsync(path.join(projectRoot, 'app.json'));\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`, 'doctor-both-app-and-exp-json');\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  try {\n    // TODO(perry) figure out a way to tell the schema validator whether this is exp.json or app.json\n    let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n    let validator = new jsonschema.Validator();\n    let validationResult = validator.validate(exp, schema);\n    if (validationResult.errors && validationResult.errors.length > 0) {\n      let fullMessage = `Warning: Problem${validationResult.errors.length > 1 ? 's' : ''} in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n\n      for (let error of validationResult.errors) {\n        // Formate the message nicely\n        let message = error.stack.replace(/instance\\./g, '').replace(/exists in instance/g, `exists in ${configName}`).replace('instance additionalProperty', 'additional property');\n        fullMessage += `\\n  - ${message}.`;\n      }\n\n      ProjectUtils.logWarning(projectRoot, 'expo', fullMessage, 'doctor-schema-validation');\n      return WARNING;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n  } catch (e) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Problem validating ${configName}: ${e.message}.`, 'doctor-schema-validation-exception');\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED') {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`, 'doctor-unversioned');\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Can't find react-native in package.json dependencies`, 'doctor-no-react-native-in-package-json');\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n  // TODO(adam) set up caching for this\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Couldn't connect to SDK versions server`, 'doctor-versions-endpoint-failed');\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`, 'doctor-invalid-sdk-version');\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // Expo fork of react-native is required\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/exponent(?:js)?\\/react-native/)) {\n      ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`, 'doctor-not-using-expo-fork');\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n          semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))) {\n        ProjectUtils.logWarning(projectRoot, 'expo', `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:exponent/react-native#${sdkVersionObject['expoReactNativeTag']}`, 'doctor-invalid-version-of-react-native');\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(projectRoot, 'expo', `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`, 'doctor-malformed-version-of-react-native');\n      return WARNING;\n    }\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number>  {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`, 'doctor-node-modules-missing');\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(projectRoot, 'expo', `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`, 'doctor-node-modules-missing');\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules', 'react-native', 'local-cli', 'cli.js'));\n    if (!result.isFile()) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`, 'doctor-react-native-not-installed');\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    ProjectUtils.logError(projectRoot, 'expo', `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`, 'doctor-react-native-not-installed');\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(projectRoot, 'expo', `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`, 'doctor-npm-not-found');\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync('npm', ['ls', '--json', '--depth', '1'], {\n        cwd: nodeModulesPath,\n      });\n      npmls = npmlsCommand.stdout;\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(projectRoot, 'expo', `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`, 'doctor-could-not-run-npm-ls');\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(projectRoot, 'expo', `Problem checking node_modules dependencies: ${e.message}`, 'doctor-problem-checking-node-modules');\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-node-modules');\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(`Warning: '${dependency}' peer depencency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`);\n          } else {\n            errorStrings.push(`Warning: '${dependency}' dependency is not installed.`);\n          }\n        }\n        // TODO: also check react-native\n        else if (dependency !== 'react-native' && !semver.satisfies(installedDependency.version, versionRequired) && !versionRequired.includes(installedDependency.from)) {\n          // For react native, `from` field looks like \"exponent/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:exponent/react-native#sdk-8.0.0\"\n          errorStrings.push(`Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`);\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(`\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`);\n        ProjectUtils.logWarning(projectRoot, 'expo', errorStrings.join('\\n'), 'doctor-node-modules-issues');\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-issues');\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(projectRoot: string, allowNetwork: boolean): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let status = await _validatePackageJsonAndExpJsonAsync(exp, pkg, projectRoot);\n\n  // Don't block this! It has to make network requests so it's slow.\n  if (allowNetwork) {\n    _validateAssetFieldsAsync(projectRoot, exp);\n  }\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<number> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile.promise(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from '${sdkPkg}'`) || mainFile.includes(`require('${sdkPkg}')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}