{"version":3,"sources":["User.js"],"names":["async","let","dfd","Deferred","server","http","createServer","req","res","method","url","body","on","data","resolve","qs","parse","writeHead","end","err","socket","connections","conn","key","remoteAddress","remotePort","destroy","cb","close","port","await","freeportAsync","listen","callbackURL","getTokenInfoAsync","promise","_startLoginServerAsync","AUTH0_DOMAIN","AUTHENTICATION_SERVER_TIMEOUT","UserManagerInstance","clientID","loginServer","refreshSessionThreshold","_currentUser","_getSessionLock","static","getGlobalInstance","__globalInstance","initialize","loginAsync","loginType","loginArgs","loginOptions","Error","connection","responseType","sso","username","password","scope","responseMode","device","auth0Options","loginResp","_auth0LoginAsync","_getProfileAsync","currentConnection","accessToken","access_token","refreshToken","refresh_token","idToken","id_token","refreshTokenClientId","setTimeout","listening","tokenInfo","profile","registerAsync","userData","user","getCurrentUserAsync","kind","userMetadata","onboarded","logoutAsync","shouldUpdateUsernamePassword","currentUser","shouldLinkAccount","registeredUser","createOrUpdateUserAsync","email","givenName","familyName","emailVerified","forceCreate","linkedAccountId","userId","linkedAccountConnection","loginsCount","e","ErrorCode","REGISTRATION_ERROR","message","ensureLoggedInAsync","Config","offline","getLegacyUserData","LEGACY_ACCOUNT_ERROR","NOT_LOGGED_IN","acquire","_isTokenExpired","UserSettings","getAsync","Logger","global","error","release","legacyUsername","legacy","needsPasswordMigration","api","ApiV2Client","clientForUser","updatedUser","postAsync","_prepareAuth0Profile","_parseAuth0Profile","code","details","Analytics","logEvent","deleteKeyAsync","Intercom","update","forgotPasswordAsync","usernameOrEmail","_auth0ForgotPasswordAsync","dtoken","jwt","decode","complete","aud","payload","currentRefreshTokenClientId","process","env","NODE_ENV","debug","delegationResult","_auth0RefreshToken","_auth0GetProfileAsync","mergeAsync","auth","setUserProperties","intercomUserHash","exp","Date","now","window","Auth0JS","_auth0JSInstanceWithOptions","resp","Auth0Node","_nodeAuth0InstanceWithOptions","oauth","signIn","_formatAuth0NodeError","INVALID_USERNAME_PASSWORD","opn","_buildAuth0SocialLoginUrl","wait","getProfileAsync","tokens","getInfo","clientId","delegationTokenOptions","api_type","target","client_id","getDelegationTokenAsync","getDelegationToken","grant_type","changePasswordAsync","database","changePassword","name","errData","JSON","description","error_description","qsData","response_type","response_mode","redirect_uri","queryString","stringify","options","Auth0","require","domain","Auth0Instance","Bluebird","promisifyAll","management","_","omit","ManagementClient","AuthenticationClient","rawProfile","Object","keys","reduce","p","camelCase","niceProfile","snakeCase","constructor","Promise","reject"],"mappings":"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","file":"../User.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport Bluebird from 'bluebird';\nimport freeportAsync from 'freeport-async';\nimport http from 'http';\nimport qs from 'querystring';\nimport opn from 'opn';\nimport jwt from 'jsonwebtoken';\n\nimport type Auth0JS from 'auth0-js';\nimport type Auth0Node from 'auth0';\n\nimport ApiV2Client, { ApiV2Error } from './ApiV2';\n\nimport * as Analytics from './Analytics';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\nimport Logger from './Logger';\n\nimport * as Intercom from './Intercom';\nimport UserSettings from './UserSettings';\n\nimport { Semaphore } from './Utils';\n\nexport type User = {\n  kind: 'user',\n  // required\n  name: string,\n  username: string,\n  nickname: string,\n  userId: string,\n  picture: string,\n  // optional\n  email?: string,\n  emailVerified?: boolean,\n  givenName?: string,\n  familyName?: string,\n  loginsCount?: number,\n  intercomUserHash: string,\n  userMetadata: {\n    onboarded: boolean,\n    legacy?: boolean,\n  },\n  identities: Array<{\n    connection: ConnectionType,\n    isSocial: boolean,\n    provider: string,\n    userId: string,\n  }>,\n  accessToken: string,\n  idToken: string,\n  refreshToken: string,\n  currentConnection: ConnectionType,\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser',\n  username: string,\n  userMetadata: {\n    legacy: boolean,\n    needsPasswordMigration: boolean\n  }\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\ntype ConnectionType = 'Username-Password-Authentication' | 'facebook' | 'google-oauth2' | 'github';\n\ntype LoginOptions = {\n  connection: ConnectionType,\n  device: string,\n  responseType: string,\n  responseMode: string,\n};\n\nexport type RegistrationData = {\n  username: string,\n  password: string,\n  email?: string,\n  givenName?: string,\n  familyName?: string\n};\n\ntype Auth0Options = {\n  clientID: string,\n  callbackURL?: string,\n};\n\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nconst AUTH0_DOMAIN = 'exponent.auth0.com';\nconst AUTHENTICATION_SERVER_TIMEOUT = 1000 * 60 * 5; // 5 minutes\n\nexport class UserManagerInstance {\n  clientID = 'o0YygTgKhOTdoWj10Yl9nY2P0SMTw38Y'; // Default Client ID\n  loginServer = null;\n  refreshSessionThreshold = 60 * 60; // 1 hour\n  _currentUser: ?User = null;\n  _getSessionLock = new Semaphore();\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize(clientID: ?string) {\n    if (clientID) {\n      this.clientID = clientID;\n    }\n    this.loginServer = null;\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *  - \"facebook\": Facebook authentication\n   *  - \"google\": Google authentication\n   *  - \"github\": Github authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to Auth0\n   * to login a user.\n   *\n   * If the login type is any of the social providers, we start a web server\n   * that can act as the receiver of the OAuth callback from the authentication\n   * process. The response we receive on that web server will be token data.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string, password: string }\n  ): Promise<User> {\n    let loginOptions;\n\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      loginOptions = {\n        connection: 'Username-Password-Authentication',\n        responseType: 'token',\n        sso: false,\n        username: loginArgs.username,\n        password: loginArgs.password,\n      };\n    } else if (loginType === 'facebook') {\n      loginOptions = {\n        connection: 'facebook',\n      };\n    } else if (loginType === 'google') {\n      loginOptions = {\n        connection: 'google-oauth2',\n      };\n    } else if (loginType === 'github') {\n      loginOptions = {\n        connection: 'github',\n      };\n    } else {\n      throw new Error(`Invalid login type provided. Must be one of 'user-pass', 'facebook', 'google', or 'github'.`);\n    }\n\n    loginOptions = {\n      ...loginOptions,\n      scope: 'openid offline_access username nickname',\n      // audience: 'https://exp.host',\n      responseMode: 'form_post',\n      responseType: 'token',\n      device: 'xdl',\n    };\n\n    let auth0Options = {\n      clientID: this.clientID,\n    };\n\n    if (loginType === 'user-pass') {\n      try {\n        const loginResp = await this._auth0LoginAsync(auth0Options, loginOptions);\n        return await this._getProfileAsync({\n          currentConnection: loginOptions.connection,\n          accessToken: loginResp.access_token,\n          refreshToken: loginResp.refresh_token,\n          idToken: loginResp.id_token,\n          refreshTokenClientId: this.clientID,\n        });\n      } catch (err) {\n        throw err;\n      }\n    }\n\n    // Doing a social login, so start a server\n    const { server, callbackURL, getTokenInfoAsync } = await _startLoginServerAsync();\n\n    // Kill server after 5 minutes if it hasn't already been closed\n    setTimeout(() => {\n      if (server.listening) {\n        server.destroy();\n      }\n    }, AUTHENTICATION_SERVER_TIMEOUT);\n\n    auth0Options = {\n      clientID: this.clientID,\n      callbackURL,\n    };\n\n    // Don't await -- we'll get response back through server\n    // This will open a browser window\n    this._auth0LoginAsync(auth0Options, loginOptions);\n\n    // Wait for token info to come back from server\n    const tokenInfo = await getTokenInfoAsync();\n\n    server.destroy();\n\n    const profile = await this._getProfileAsync({\n      currentConnection: loginOptions.connection,\n      accessToken: tokenInfo.access_token,\n      refreshToken: tokenInfo.refresh_token,\n      idToken: tokenInfo.id_token,\n      refreshTokenClientId: this.clientID,\n    });\n\n    return profile;\n  }\n\n  async registerAsync(userData: RegistrationData, user: ?UserOrLegacyUser): Promise<User> {\n    if (!user) {\n      user = await this.getCurrentUserAsync();\n    }\n\n    if (user && user.kind === 'user' && user.userMetadata && user.userMetadata.onboarded) {\n      await this.logoutAsync();\n      user = null;\n    }\n\n    let shouldUpdateUsernamePassword = true;\n    if (user && user.kind === 'legacyUser') {\n      // we're upgrading from an older client,\n      // so login with username/pass\n      user = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n      shouldUpdateUsernamePassword = false;\n    }\n\n    const currentUser: ?User = (user: any);\n\n    const shouldLinkAccount = currentUser &&\n      currentUser.currentConnection !== 'Username-Password-Authentication';\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        userMetadata: {\n          onboarded: true,\n          givenName: userData.givenName,\n          familyName: userData.familyName,\n        },\n        ...(shouldUpdateUsernamePassword ? { username: userData.username } : {}),\n        ...(shouldLinkAccount ? { emailVerified: true } : {}),\n        ...(shouldUpdateUsernamePassword ? { password: userData.password } : {}),\n        ...(currentUser && shouldLinkAccount ? {\n          forceCreate: true,\n          linkedAccountId: currentUser.userId,\n          linkedAccountConnection: currentUser.currentConnection,\n        } : {}),\n      });\n\n      // if it's a new registration, or if they signed up with a social account,\n      // we need to re-log them in with their username/pass. Otherwise, they're\n      // already logged in.\n      if (shouldLinkAccount || (\n          registeredUser && (!registeredUser.loginsCount || (registeredUser.loginsCount && registeredUser.loginsCount < 1)))) {\n        // this is a new registration, log them in\n        registeredUser = await this.loginAsync('user-pass', {\n          username: userData.username,\n          password: userData.password,\n        });\n      }\n\n      return registeredUser;\n    } catch (e) {\n      throw new XDLError(ErrorCode.REGISTRATION_ERROR, 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<?User> {\n    if (Config.offline) {\n      return null;\n    }\n\n    const user = await this.getCurrentUserAsync();\n    if (!user) {\n      if (await this.getLegacyUserData()) {\n        throw new XDLError(ErrorCode.LEGACY_ACCOUNT_ERROR, `We've updated our account system! Please login again by running \\`exp login\\`. Sorry for the inconvenience!`);\n      }\n      throw new XDLError(ErrorCode.NOT_LOGGED_IN, 'Not logged in');\n    }\n    return user;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(): Promise<?User> {\n    await this._getSessionLock.acquire();\n\n    try {\n      // If user is cached and token isn't expired\n      // return the user\n      if (this._currentUser && !this._isTokenExpired(this._currentUser.idToken)) {\n        return this._currentUser;\n      }\n\n      // Not cached, check for token\n      let {\n        currentConnection,\n        idToken,\n        accessToken,\n        refreshToken,\n      } = await UserSettings.getAsync('auth', {});\n\n      // No tokens, no current user. Need to login\n      if (!currentConnection || !idToken || !accessToken || !refreshToken) {\n        return null;\n      }\n\n      try {\n        return await this._getProfileAsync({\n          currentConnection,\n          accessToken,\n          idToken,\n          refreshToken,\n        });\n      } catch (e) {\n        Logger.global.error(e);\n        // log us out if theres a fatal error when getting the profile with\n        // current access token\n        await this.logoutAsync();\n        return null;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  /**\n   * Get legacy user data from UserSettings.\n   */\n  async getLegacyUserData(): Promise<?LegacyUser> {\n    const legacyUsername = await UserSettings.getAsync('username', null);\n    if (legacyUsername) {\n      return {\n        kind: 'legacyUser',\n        username: legacyUsername,\n        userMetadata: {\n          legacy: true,\n          needsPasswordMigration: true,\n        },\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: Object): Promise<User> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    try {\n      const api = ApiV2Client.clientForUser(this._currentUser);\n\n      const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n        userData: _prepareAuth0Profile(userData),\n      });\n\n      this._currentUser = {\n        ...(this._currentUser || {}),\n        ..._parseAuth0Profile(updatedUser),\n      };\n      return {\n        kind: 'user',\n        ...updatedUser,\n      };\n    } catch (e) {\n      const err: ApiV2Error = (e: any);\n      if (err.code === 'AUTHENTICATION_ERROR') {\n        throw new Error(err.details.message);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser) {\n      Analytics.logEvent('Logout', {\n        username: this._currentUser.username,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved JWT\n    await UserSettings.deleteKeyAsync('auth');\n    // Delete legacy auth\n    await UserSettings.deleteKeyAsync('username');\n\n    // Logout of Intercom\n    Intercom.update(null, null);\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    return await this._auth0ForgotPasswordAsync(usernameOrEmail);\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *  - Update the currently assigned Intercom user\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync(\n    { currentConnection, accessToken, idToken, refreshToken, refreshTokenClientId }:\n    { currentConnection: ConnectionType, accessToken: string, idToken: string, refreshToken: string, refreshTokenClientId?: string }\n  ): Promise<User> {\n    // Attempt to grab profile from Auth0.\n    // If token is expired / getting the profile fails, use refresh token to\n    let user;\n    try {\n      const dtoken = jwt.decode(idToken, { complete: true });\n      const { aud } = dtoken.payload;\n\n      // If it's not a new login, refreshTokenClientId won't be set in the arguments.\n      // In this case, try to get the currentRefreshTokenClientId from UserSettings,\n      // otherwise, default back to the audience of the current id_token\n      if (!refreshTokenClientId) {\n        const {\n          refreshTokenClientId: currentRefreshTokenClientId,\n        } = await UserSettings.getAsync('auth', {});\n        if (!currentRefreshTokenClientId) {\n          refreshTokenClientId = aud; // set it to the \"aud\" property of the existing token\n        } else {\n          refreshTokenClientId = currentRefreshTokenClientId;\n        }\n      }\n\n      // TODO(@skevy): remove\n      if (process.env.NODE_ENV !== 'production') { Logger.global.debug('REFRESH_TOKEN_CLIENT_ID', refreshTokenClientId); }\n      // TODO(@skevy): remove\n      if (process.env.NODE_ENV !== 'production') { Logger.global.debug('DECODED TOKEN', dtoken); }\n\n      if (this._isTokenExpired(idToken)) { // if there's less than the refresh session threshold left on the token, refresh it\n        // TODO(@skevy): remove\n        if (process.env.NODE_ENV !== 'production') { Logger.global.debug('REFRESHING ID TOKEN'); }\n        // TODO(@skevy): remove\n        if (process.env.NODE_ENV !== 'production') { Logger.global.debug('REFRESH TOKEN', refreshToken); }\n        const delegationResult = await this._auth0RefreshToken(\n          refreshTokenClientId, // client id that's associated with the refresh token\n          refreshToken, // refresh token to use\n        );\n        // TODO(@skevy): remove\n        if (process.env.NODE_ENV !== 'production') { Logger.global.debug('SUCCESSFULLY GOT NEW ID TOKEN'); }\n        idToken = delegationResult.id_token;\n        // TODO(@skevy): remove\n        if (process.env.NODE_ENV !== 'production') { Logger.global.debug('NEW ID TOKEN', idToken); }\n      }\n      // TODO(@skevy): remove\n      if (process.env.NODE_ENV !== 'production') { Logger.global.debug('ID TOKEN FOR PROFILE', idToken); }\n      user = await this._auth0GetProfileAsync(idToken);\n      // TODO(@skevy): remove\n      if (process.env.NODE_ENV !== 'production') { Logger.global.debug('USER DATA', user); }\n      if (!user) {\n        throw new Error('No user profile associated with this token');\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      kind: 'user',\n      currentConnection,\n      accessToken,\n      idToken,\n      refreshToken,\n    };\n\n    await UserSettings.mergeAsync({\n      auth: {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        accessToken,\n        idToken,\n        refreshToken,\n        ...(refreshTokenClientId ? { refreshTokenClientId } : {}),\n      },\n    });\n\n    await UserSettings.deleteKeyAsync('username');\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if ((!this._currentUser || this._currentUser.userId !== user.userId) &&\n        user.username &&\n        user.username !== '') {\n      Analytics.logEvent('Login', {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n\n      if (user.intercomUserHash) {\n        Intercom.update(user.username, user.intercomUserHash);\n      }\n    } else {\n      Intercom.update(null, null);\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n\n  _isTokenExpired(idToken: string): boolean {\n    const dtoken = jwt.decode(idToken, { complete: true });\n    const { exp } = dtoken.payload;\n    // TODO(@skevy): remove\n    if (process.env.NODE_ENV !== 'production') { Logger.global.debug('TOKEN EXPIRATION', exp); }\n    // TODO(@skevy): remove\n    if (process.env.NODE_ENV !== 'production') { Logger.global.debug('TOKEN TIME LEFT', exp - (Date.now() / 1000)); }\n\n    return exp - (Date.now() / 1000) <= this.refreshSessionThreshold;\n  }\n\n  async _auth0LoginAsync(auth0Options: Auth0Options, loginOptions: LoginOptions): Promise<*> {\n    if (typeof window !== 'undefined' && window) {\n      const Auth0JS = _auth0JSInstanceWithOptions(auth0Options);\n      const resp = await Auth0JS.loginAsync(loginOptions);\n      return {\n        access_token: resp.accessToken,\n        id_token: resp.idToken,\n        refresh_token: resp.refreshToken,\n      };\n    }\n\n    const Auth0Node = _nodeAuth0InstanceWithOptions(auth0Options);\n\n    if (loginOptions.connection === 'Username-Password-Authentication') {\n      try {\n        return await Auth0Node.oauth.signIn(loginOptions);\n      } catch (e) {\n        const err = _formatAuth0NodeError(e);\n        if (err.message === 'invalid_user_password') {\n          throw new XDLError(ErrorCode.INVALID_USERNAME_PASSWORD, 'Invalid username or password');\n        } else {\n          throw err;\n        }\n      }\n    } else { // social\n      opn(_buildAuth0SocialLoginUrl(auth0Options, loginOptions), { wait: false });\n      return {};\n    }\n  }\n\n  async _auth0GetProfileAsync(idToken: string): Promise<*> {\n    if (typeof window !== 'undefined' && window) {\n      const Auth0JS = _auth0JSInstanceWithOptions({ clientID: this.clientID });\n      return await Auth0JS.getProfileAsync(idToken);\n    }\n\n    const Auth0Node = _nodeAuth0InstanceWithOptions({ clientID: this.clientID });\n\n    const profile = await Auth0Node.tokens.getInfo(idToken);\n    return profile;\n  }\n\n  async _auth0RefreshToken(clientId: string, refreshToken: string): Promise<*> {\n    const delegationTokenOptions = {\n      refresh_token: refreshToken,\n      api_type: 'app',\n      scope: 'openid offline_access nickname username',\n      target: this.clientID,\n      client_id: clientId,\n    };\n\n    if (typeof window !== 'undefined' && window) {\n      const Auth0JS = _auth0JSInstanceWithOptions({\n        clientID: clientId,\n      });\n\n      return await Auth0JS.getDelegationTokenAsync({\n        ...delegationTokenOptions,\n      });\n    }\n\n    const Auth0Node = _nodeAuth0InstanceWithOptions({ clientID: this.clientID });\n\n    const delegationResult = await Auth0Node.tokens.getDelegationToken({\n      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n      ...delegationTokenOptions,\n    });\n\n    return delegationResult;\n  }\n\n  async _auth0ForgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    if (typeof window !== 'undefined' && window) {\n      const Auth0JS = _auth0JSInstanceWithOptions({ clientID: this.clientID });\n      return await Auth0JS.changePasswordAsync({\n        connection: 'Username-Password-Authentication',\n        email: usernameOrEmail,\n      });\n    }\n\n    const Auth0Node = _nodeAuth0InstanceWithOptions({ clientID: this.clientID });\n\n    return await Auth0Node.database.changePassword({\n      connection: 'Username-Password-Authentication',\n      email: usernameOrEmail,\n    });\n  }\n}\n\nlet __globalInstance;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\n\ntype APIError = Error & {\n  name: string,\n  statusCode: string,\n};\n\ntype ErrorWithDescription = Error & {\n  description?: string,\n};\n\nfunction _formatAuth0NodeError(e: APIError) {\n  if (e.name !== 'APIError') {\n    return e;\n  } else {\n    const errData = JSON.parse(e.message);\n    const err: ErrorWithDescription = new Error(errData.error);\n    err.description = errData.error_description;\n    return err;\n  }\n}\n\nfunction _buildAuth0SocialLoginUrl(auth0Options: Auth0Options, loginOptions: LoginOptions) {\n  const qsData = {\n    scope: 'openid offline_access username nickname',\n    response_type: loginOptions.responseType,\n    response_mode: loginOptions.responseMode,\n    connection: loginOptions.connection,\n    device: 'xdl',\n    client_id: auth0Options.clientID,\n    redirect_uri: auth0Options.callbackURL,\n  };\n\n  const queryString = qs.stringify(qsData);\n\n  return `https://${AUTH0_DOMAIN}/authorize?${queryString}`;\n}\n\nfunction _auth0JSInstanceWithOptions(options: Object = {}): any {\n  const Auth0 = require('auth0-js');\n\n  let auth0Options = {\n    domain: AUTH0_DOMAIN,\n    responseType: 'token',\n    ...options,\n  };\n\n  const Auth0Instance = Bluebird.promisifyAll(\n    new Auth0(auth0Options)\n  );\n\n  return Auth0Instance;\n}\n\nfunction _nodeAuth0InstanceWithOptions(options: Object = {}): any {\n  let auth0Options = {\n    domain: AUTH0_DOMAIN,\n    clientId: options.clientID || options.clientId,\n    ...options,\n  };\n\n  let Auth0Instance;\n  if (auth0Options.management === true) {\n    auth0Options = _.omit(auth0Options, 'management');\n    const ManagementClient = require('auth0').ManagementClient;\n    Auth0Instance = new ManagementClient(auth0Options);\n  } else {\n    const AuthenticationClient = require('auth0').AuthenticationClient;\n    Auth0Instance = new AuthenticationClient(auth0Options);\n  }\n\n  return Auth0Instance;\n}\n\nfunction _parseAuth0Profile(rawProfile: any): User {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return ((Object.keys(rawProfile).reduce((p, key) => {\n    p[_.camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any): Object {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return ((Object.keys(niceProfile).reduce((p, key) => {\n    p[_.snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n\ntype TokenInfo = {\n  access_token: string,\n  id_token: string,\n  refresh_token: string,\n};\n\nclass Deferred<X> {\n  promise: Promise<X>;\n  resolve: (...args: Array<*>) => void;\n  reject: (...args: Array<*>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n\ntype ServerWithDestroy = {\n  destroy: Function,\n  listening: boolean,\n  on: Function,\n  close: Function,\n  listen: Function,\n};\n\nasync function _startLoginServerAsync(): Promise<{\n  server: ServerWithDestroy,\n  callbackURL: string,\n  getTokenInfoAsync: () => Promise<TokenInfo>\n}> {\n  let dfd = new Deferred();\n\n  const server: ServerWithDestroy = ((http.createServer((req, res) => {\n    if (req.method === 'POST' &&\n        req.url === '/callback') {\n      let body = '';\n      req.on('data', function(data) {\n        body += data;\n      });\n      req.on('end', function() {\n        dfd.resolve(qs.parse(body));\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end(`\n          <html>\n          <head>\n            <script>\n              window.close();\n            </script>\n          </head>\n          <body>\n            Authenticated successfully! You can close this window.\n          </body>\n          </html>\n        `);\n      });\n    } else {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <html>\n        <head></head>\n        <body></body>\n        </html>\n      `);\n    }\n  }): any): ServerWithDestroy);\n\n  server.on('clientError', (err, socket) => { //eslint-disable-line\n    socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  });\n\n  let connections = {};\n\n  server.on('connection', function(conn) {\n    let key = conn.remoteAddress + ':' + conn.remotePort;\n    connections[key] = conn;\n    conn.on('close', function() {\n      delete connections[key];\n    });\n  });\n\n  server.destroy = function(cb) {\n    server.close(cb);\n    for (let key in connections)\n      { connections[key].destroy(); }\n  };\n\n  const port = await freeportAsync(11000);\n  try {\n    server.listen(port, '127.0.0.1');\n\n    return {\n      server,\n      callbackURL: `http://127.0.0.1:${port}/callback`,\n      getTokenInfoAsync: (): Promise<TokenInfo> => dfd.promise,\n    };\n  } catch (err) {\n    throw err;\n  }\n}\n"],"sourceRoot":"/xdl/src"}