{"version":3,"sources":["ProjectSettings.js"],"names":["async","projectRoot","let","projectSettings","await","projectSettingsJsonFile","projectSettingsFile","readAsync","e","writeAsync","projectSettingsDefaults","hostType","_","defaults","json","mergeAsync","cantReadFileDefault","setAsync","packagerInfoFile","readPackagerInfoAsync","setPackagerInfoAsync","getPackagerOptsAsync","dotExpoProjectDirectory","dotExpoProjectDirectoryExists","lanType","dev","strict","minify","urlType","urlRandomness","filename","path","join","dirPath","oldDirPath","fs","statSync","isDirectory","renameSync","mkdirp","sync"],"mappings":"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","file":"../ProjectSettings.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport JsonFile from '@exponent/json-file';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nlet projectSettingsFile = 'settings.json';\nlet projectSettingsDefaults = {\n  hostType: 'tunnel',\n  lanType: 'ip',\n  dev: true,\n  strict: false,\n  minify: false,\n  urlType: 'exp',\n  urlRandomness: null,\n};\nlet packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string, filename: string) {\n  return new JsonFile(path.join(dotExpoProjectDirectory(projectRoot), filename));\n}\n\nexport async function readAsync(projectRoot: string) {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(projectSettingsDefaults);\n  }\n\n  if (projectSettings.hostType === 'ngrok') { // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  // Set defaults for any missing fields\n  _.defaults(projectSettings, projectSettingsDefaults);\n  return projectSettings;\n}\n\nexport async function setAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).mergeAsync(json, {cantReadFileDefault: projectSettingsDefaults});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(_.defaults(json, projectSettingsDefaults));\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).readAsync({cantReadFileDefault: {}});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync({});\n  }\n}\n\nexport async function setPackagerInfoAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).mergeAsync(json, {cantReadFileDefault: {}});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(json);\n  }\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    let oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  mkdirp.sync(dirPath);\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string) {\n  let projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"],"sourceRoot":"/xdl/src"}