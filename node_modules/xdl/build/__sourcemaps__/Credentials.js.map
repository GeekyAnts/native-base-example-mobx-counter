{"version":3,"sources":["Credentials.js"],"names":["async","username","experienceName","bundleIdentifier","platform","err","credentials","await","Api","callMethodAsync","decrypt","Error","credentialsExistForPlatformAsync","newCredentials","metadata","updateCredentialsForPlatform","removeCredentialsForPlatform","validationType","isValid","error","errorCode","errorMessage","validateCredentialsForPlatform","success","fetchAppleCertificates","ensureAppId","result","fetchPushCertificates"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport Api from './Api';\nimport XDLError from './XDLError';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n};\n\nexport type Credentials = IOSCredentials & AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string\n}\n\nexport async function credentialsExistForPlatformAsync({\n  username,\n  experienceName,\n  bundleIdentifier,\n  platform,\n}: CredentialMetadata): Promise<?Credentials> {\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt: false,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(platform: string, newCredentials: Credentials, metadata: CredentialMetadata): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n\n  return;\n}\n\nexport async function removeCredentialsForPlatform(platform: string, metadata: CredentialMetadata): Promise<void> {\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n\n  return;\n}\n\nexport async function validateCredentialsForPlatform(\n  platform: string,\n  validationType: string,\n  credentials: ?Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { isValid, error, errorCode, errorMessage } = await Api.callMethodAsync('validateCredentials', [], 'post', {\n    credentials,\n    platform,\n    validationType,\n    ...metadata,\n  });\n\n  if (!isValid || error) {\n    throw new XDLError(errorCode, `Unable to validate credentials: ${errorMessage}`);\n  }\n\n  return;\n}\n\nexport async function fetchAppleCertificates(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const { err, success, error, errorCode, errorMessage } = await Api.callMethodAsync('fetchAppleCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success || error) {\n    throw new XDLError(errorCode, `Unable to fetch distribution certificate: ${errorMessage}`);\n  }\n\n  return success;\n}\n\nexport async function ensureAppId(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const { err, success, errorCode, errorMessage } = await Api.callMethodAsync('ensureAppId', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success) {\n    throw new XDLError(errorCode, `Unable to create app id: ${errorMessage}`);\n  }\n\n  return success;\n}\n\nexport async function fetchPushCertificates(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const result = await Api.callMethodAsync('fetchPushCertificates', [], 'post', {\n    ...metadata,\n  });\n\n\n\n  if (result.err || !result.success) {\n    throw new XDLError(result.errorCode, `Unable to fetch push certificate: ${result.errorMessage}`);\n  }\n\n  return result.success;\n}\n"],"sourceRoot":"/xdl/src"}