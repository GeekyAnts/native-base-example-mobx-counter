{"version":3,"sources":["Android.js"],"names":["async","args","await","Binaries","addToPathAsync","let","result","spawnAsync","stdout","e","errorMessage","_","trim","stderr","startsWith","BEGINNING_OF_ADB_ERROR_MESSAGE","substring","length","Error","_getAdbOutputAsync","devices","lines","split","_isDeviceAttachedAsync","shift","listOfDevicesWithoutFirstLine","join","includes","_isDeviceAuthorizedAsync","packages","i","line","_isExpoInstalledAsync","info","regex","regexMatch","exec","_expoVersionAsync","versions","Api","versionsAsync","installedVersion","semver","lt","androidVersion","Logger","notifications","warn","code","NotificationCode","OLD_ANDROID_APP_VERSION","_checkExpoUpToDateAsync","apkPath","path","_apkCacheDirectory","existsAsync","downloadAsync","androidUrl","_downloadApkAsync","global","START_LOADING","STOP_LOADING","_installExpoAsync","_uninstallExpoAsync","_assertDeviceReadyAsync","_lastUrl","error","message","upgradeExpoAsync","genymotionMessage","url","output","CANT_START_ACTIVITY_ERROR","indexOf","_openUrlAsync","isDetached","installedExpo","Analytics","logEvent","platform","openUrlAsync","projectRoot","startAdbReverseAsync","projectUrl","UrlUtils","constructManifestUrlAsync","exp","ProjectUtils","readConfigJsonAsync","success","openProjectAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","adbReverse","packagerPort","expoServerPort","adbReverseRemove","stopAdbReverseAsync","port","debug","isPlatformSupported","process","dotExpoHomeDirectory","UserSettings","dir","mkdirp","sync"],"mappings":"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","file":"../Android.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport spawnAsync from '@exponent/spawn-async';\nimport existsAsync from 'exists-async';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport semver from 'semver';\n\nimport * as Analytics from './Analytics';\nimport * as Binaries from './Binaries';\nimport Api from './Api';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport UserSettings from './UserSettings';\nimport * as UrlUtils from './UrlUtils';\n\nlet _lastUrl = null;\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nexport function isPlatformSupported() {\n  return process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux';\n}\n\nasync function _getAdbOutputAsync(args) {\n  await Binaries.addToPathAsync('adb');\n\n  try {\n    let result = await spawnAsync('adb', args);\n    return result.stdout;\n  } catch (e) {\n    let errorMessage = _.trim(e.stderr);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n// Device attached\nasync function _isDeviceAttachedAsync() {\n  let devices = await _getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  // First line is \"List of devices\".\n  return lines.length > 1;\n}\n\nasync function _isDeviceAuthorizedAsync() {\n  let devices = await _getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  lines.shift();\n  let listOfDevicesWithoutFirstLine = lines.join('\\n');\n  // result looks like \"072c4cf200e333c7\tdevice\" when authorized\n  // and \"072c4cf200e333c7\tunauthorized\" when not.\n  return listOfDevicesWithoutFirstLine.includes('device');\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync() {\n  let packages = await _getAdbOutputAsync(['shell', 'pm', 'list', 'packages', '-f']);\n  let lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    if (line.includes('host.exp.exponent.test')) {\n      continue;\n    }\n\n    if (line.includes('host.exp.exponent')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function _expoVersionAsync() {\n  let info = await _getAdbOutputAsync(['shell', 'dumpsys', 'package', 'host.exp.exponent']);\n\n  let regex = /versionName\\=([0-9\\.]+)/;\n  let regexMatch = regex.exec(info);\n  if (regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function _checkExpoUpToDateAsync() {\n  let versions = await Api.versionsAsync();\n  let installedVersion = await _expoVersionAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.androidVersion)) {\n    Logger.notifications.warn({code: NotificationCode.OLD_ANDROID_APP_VERSION}, 'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.');\n  }\n}\n\nfunction _apkCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'android-apk-cache');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _downloadApkAsync() {\n  let versions = await Api.versionsAsync();\n  let apkPath = path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`);\n\n  if (await existsAsync(apkPath)) {\n    return apkPath;\n  }\n\n  await Api.downloadAsync(versions.androidUrl, path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`));\n  return apkPath;\n}\n\nasync function _installExpoAsync() {\n  Logger.global.info(`Downloading latest version of Expo`);\n  Logger.notifications.info({code: NotificationCode.START_LOADING});\n  let path = await _downloadApkAsync();\n  Logger.global.info(`Installing Expo on device`);\n  let result = await _getAdbOutputAsync(['install', path]);\n  Logger.notifications.info({code: NotificationCode.STOP_LOADING});\n  return result;\n}\n\nasync function _uninstallExpoAsync() {\n  Logger.global.info('Uninstalling Expo from Android device.');\n  return await _getAdbOutputAsync(['uninstall', 'host.exp.exponent']);\n}\n\nexport async function upgradeExpoAsync() {\n  try {\n    await _assertDeviceReadyAsync();\n\n    await _uninstallExpoAsync();\n    await _installExpoAsync();\n\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await _getAdbOutputAsync(['shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', _lastUrl]);\n      _lastUrl = null;\n    }\n  } catch (e) {\n    Logger.global.error(e.message);\n  }\n}\n\n// Open Url\nasync function _assertDeviceReadyAsync() {\n  const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n\n  if (!(await _isDeviceAttachedAsync())) {\n    throw new Error(`No Android device found. Please connect a device and follow the instructions here to enable USB debugging:\\n${genymotionMessage}`);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync())) {\n    throw new Error(`This computer is not authorized to debug the device. Please follow the instructions here to enable USB debugging:\\n${genymotionMessage}`);\n  }\n}\n\nasync function _openUrlAsync(url: string) {\n  let output = await _getAdbOutputAsync(['shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url]);\n  if (output.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(output.substring(output.indexOf('Error: ')));\n  }\n\n  return output;\n}\n\nasync function openUrlAsync(url: string, isDetached: boolean = false) {\n  try {\n    await _assertDeviceReadyAsync();\n\n    let installedExpo = false;\n    if (!isDetached && !(await _isExpoInstalledAsync())) {\n      await _installExpoAsync();\n      installedExpo = true;\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening on Android device`);\n    try {\n      await _openUrlAsync(url);\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nexport async function openProjectAsync(projectRoot: string) {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot);\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n    await openUrlAsync(projectUrl, !!exp.isDetached);\n    return { success: true, error: null };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string) {\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  return await adbReverse(packagerInfo.packagerPort) && await adbReverse(packagerInfo.expoServerPort);\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string) {\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  await adbReverseRemove(packagerInfo.packagerPort);\n  await adbReverseRemove(packagerInfo.expoServerPort);\n}\n\nasync function adbReverse(port: number) {\n  if (!await _isDeviceAuthorizedAsync()) {\n    return false;\n  }\n\n  try {\n    await _getAdbOutputAsync(['reverse', `tcp:${port}`, `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove(port: number) {\n  if (!await _isDeviceAuthorizedAsync()) {\n    return false;\n  }\n\n  try {\n    await _getAdbOutputAsync(['reverse', '--remove', `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n"],"sourceRoot":"/xdl/src"}