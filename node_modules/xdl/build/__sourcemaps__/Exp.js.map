{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateId","progressFunction","retryFunction","versions","Api","versionsAsync","templateApp","i","templates","length","id","ErrorCode","INVALID_OPTIONS","starterAppVersion","version","starterAppName","filename","starterAppPath","path","join","_starterAppCacheDirectory","existsAsync","url","downloadAsync","_downloadStarterAppAsync","selectedDir","opts","schema","joi","object","keys","name","string","required","promise","validate","e","toString","Analytics","logEvent","fileExists","fs","statSync","readdirSync","DIRECTORY_ALREADY_EXISTS","mkdirp","Logger","notifications","info","code","NotificationCode","PROGRESS","MessageCode","DOWNLOADING","downloadTemplateApp","EXTRACTING","Extract","extractAsync","CUSTOMIZING","author","UserSettings","getAsync","packageJsonFile","packageJson","readAsync","data","Object","assign","description","writeAsync","mainJs","readFile","customMainJs","replace","writeFile","expJson","customExpJson","initGitRepo","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","global","warn","insideGit","spawnAsync","cwd","debug","stderr","resolve","recentExpsJsonFile","recentExps","cantReadFileDefault","filter","x","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","user","UserManager","ensureLoggedInAsync","Error","username","slug","configName","configFilenameAsync","sdkVersion","remotePackageName","remoteUsername","remoteFullPackageName","bundleIdentifierIOS","ios","bundleIdentifier","packageNameAndroid","android","package","args","getPublishInfoAsync","results","Promise","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","callMethodAsync","sendAsync","projectRoot","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","dotExpoHomeDirectory","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","_getPlatformSpecificEntryPoint","endsWith","substring","dir","getHomeDir","env","pth","homedir","substr"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport existsAsync from 'exists-async';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport spawnAsync from '@exponent/spawn-async';\nimport JsonFile from '@exponent/json-file';\nimport joi from 'joi';\nimport rimraf from 'rimraf';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\nimport MessageCode from './MessageCode';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nfunction _getPlatformSpecificEntryPoint(entryPoint, platform) {\n  if (entryPoint.endsWith('.js')) {\n    return `${entryPoint.substring(0, entryPoint.length - 3)}.${platform}.js`;\n  } else {\n    return `${entryPoint}.${platform}.js`;\n  }\n}\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nfunction _starterAppCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'starter-app-cache');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _downloadStarterAppAsync(templateId, progressFunction, retryFunction) {\n  let versions = await Api.versionsAsync();\n  let templateApp = null;\n  for (let i = 0; i < versions.templates.length; i++) {\n    if (templateId === versions.templates[i].id) {\n      templateApp = versions.templates[i];\n    }\n  }\n\n  if (!templateApp) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, `No template app with id ${templateId}.`);\n  }\n\n  let starterAppVersion = templateApp.version;\n  let starterAppName = `${templateId}-${starterAppVersion}`;\n  let filename = `${starterAppName}.tar.gz`;\n  let starterAppPath = path.join(_starterAppCacheDirectory(), filename);\n\n  if (await existsAsync(starterAppPath)) {\n    return {\n      starterAppPath,\n      starterAppName,\n    };\n  }\n\n  let url = `https://s3.amazonaws.com/exp-starter-apps/${filename}`;\n  await Api.downloadAsync(url, path.join(_starterAppCacheDirectory(), filename), {}, progressFunction, retryFunction);\n  return {\n    starterAppPath,\n    starterAppName,\n  };\n}\n\nexport async function downloadTemplateApp(templateId: string, selectedDir: string, opts: any) {\n  // Validate\n  let schema = joi.object().keys({\n    name: joi.string().required(),\n  });\n\n  // Should we validate that name is a valid name here?\n  try {\n    await joi.promise.validate({name: opts.name}, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n  let name = opts.name;\n  let root = path.join(selectedDir, name);\n\n  Analytics.logEvent('New Project', {\n    selectedDir,\n    name,\n  });\n\n  let fileExists = true;\n  try {\n    // If file doesn't exist it will throw an error.\n    // Don't want to continue unless there is nothing there.\n    fs.statSync(root);\n  } catch (e) {\n    fileExists = false;\n  }\n  // This check is required because without it, the retry button would throw an error because the directory already exists,\n  // even though it is empty.\n  if (fileExists && fs.readdirSync(root).length !== 0) {\n    throw new XDLError(ErrorCode.DIRECTORY_ALREADY_EXISTS, `That directory already exists. Please choose a different parent directory or project name.`);\n  }\n\n  // Download files\n  await mkdirp.promise(root);\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, MessageCode.DOWNLOADING);\n  let { starterAppPath } = await _downloadStarterAppAsync(templateId, opts.progressFunction, opts.retryFunction);\n  return { starterAppPath, name, root };\n}\n\nexport async function extractTemplateApp(starterAppPath: string, name: string, root: string) {\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, MessageCode.EXTRACTING);\n  await Extract.extractAsync(starterAppPath, root);\n\n  // Update files\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, MessageCode.CUSTOMIZING);\n\n  let author = await UserSettings.getAsync('email', null);\n  let packageJsonFile = new JsonFile(path.join(root, 'package.json'));\n  let packageJson = await packageJsonFile.readAsync();\n  let data = Object.assign(packageJson, {\n    name,\n    version: '0.0.0',\n    description: \"Hello Expo!\",\n    author,\n  });\n\n  await packageJsonFile.writeAsync(data);\n\n  // Custom code for replacing __NAME__ in main.js\n  let mainJs = await fs.readFile.promise(path.join(root, 'main.js'), 'utf8');\n  let customMainJs = mainJs.replace(/__NAME__/g, data.name);\n  await fs.writeFile.promise(path.join(root, 'main.js'), customMainJs, 'utf8');\n\n  // Update exp.json\n  let expJson = await fs.readFile.promise(path.join(root, 'exp.json'), 'utf8');\n  let customExpJson = expJson.replace(/\\\"My New Project\\\"/, `\"${data.name}\"`).replace(/\\\"my-new-project\\\"/, `\"${data.name}\"`);\n  await fs.writeFile.promise(path.join(root, 'exp.json'), customExpJson, 'utf8');\n\n  await initGitRepo(root);\n\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, 'Starting project...');\n\n  return root;\n}\n\nasync function initGitRepo(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], { cwd: root });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n      Logger.global.warn(`Unable to initialize git repo: ${e.stderr}`);\n    }\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync({cantReadFileDefault: []});\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let { exp: { name, description, icon, iconUrl } } = await ProjectUtils.readConfigJsonAsync(root);\n    let pathOrUrl = icon || iconUrl || 'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    bundleIdentifierIOS: ?string,\n    packageNameAndroid: ?string,\n  },\n};\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const version = exp.version;\n\n  const configName = await ProjectUtils.configFilenameAsync(root);\n\n  if (!exp || !exp.sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  let remotePackageName = name;\n  let remoteUsername = username;\n  let remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  let bundleIdentifierIOS = exp.ios ? exp.ios.bundleIdentifier : null;\n  let packageNameAndroid = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      bundleIdentifierIOS,\n      packageNameAndroid, // TODO: this isn't used anywhere\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync({cantReadFileDefault: []});\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults.slice(0, 5);\n}\n\nexport async function sendAsync(recipient: string, url_: string) {\n  let result = await Api.callMethodAsync('send', [recipient, url_]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, {'urlRandomness': randomness});\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/xdl/src"}