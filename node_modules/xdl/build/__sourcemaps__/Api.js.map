{"version":3,"sources":["Api.js"],"names":["async","url","method","requestBody","requestOptions","clientId","await","Session","clientIdAsync","user","UserManager","getCurrentUserAsync","idToken","accessToken","let","headers","options","body","json","response","request","promise","responseBody","responseObj","_","isString","JSON","parse","e","ErrorCode","INVALID_JSON","err","ApiError","code","serverError","_callMethodAsync","path","progressFunction","retryFunction","promptShown","currentProgress","warningTimer","setTimeout","TIMER_DURATION","Promise","resolve","reject","progress","timeout","TIMEOUT","Error","on","roundedProgress","Math","round","percent","clearTimeout","undefined","pipe","fs","createWriteStream","_downloadAsync","message","_isApiError","ROOT_BASE_URL","Config","api","scheme","host","port","API_BASE_URL","ApiClient","static","callMethodAsync","methodName","args","encodeURIComponent","stringify","callPathAsync","versionsAsync","_versionCache","getAsync","xdlSchemaAsync","sdkVersion","_schemaCaches","hasOwnProperty","sdkVersionsAsync","versions","sdkVersions","downloadAsync","outputPath","extract","dotExpoHomeDirectory","UserSettings","tmpPath","join","Extract","extractAsync","rimraf","sync"],"mappings":"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","file":"../Api.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport request from 'request';\nimport progress from 'request-progress';\nimport fs from 'fs';\nimport rimraf from 'rimraf';\nimport path from 'path';\n\nimport { Cacher } from './tools/FsCache';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport * as Session from './Session';\nimport UserManager from './User';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\n\nconst TIMER_DURATION = 30000;\nconst TIMEOUT = 60000;\n\nfunction ApiError(code, message) {\n  let err = new Error(message);\n  // $FlowFixMe error has no property code\n  err.code = code;\n  // $FlowFixMe error has no property _isApiError\n  err._isApiError = true;\n  return err;\n}\n\nlet ROOT_BASE_URL = `${Config.api.scheme}://${Config.api.host}`;\nif (Config.api.port) {\n  ROOT_BASE_URL += ':' + Config.api.port;\n}\nlet API_BASE_URL = ROOT_BASE_URL + '/--/api/';\n\nasync function _callMethodAsync(url, method, requestBody, requestOptions): Promise<any> {\n  const clientId = await Session.clientIdAsync();\n  const user = await UserManager.getCurrentUserAsync() || {};\n\n  const { idToken, accessToken } = user;\n\n  let headers: any = {\n    'Exp-ClientId': clientId,\n  };\n\n  if (idToken) {\n    headers['Authorization'] = `Bearer ${idToken}`;\n  }\n\n  if (accessToken) {\n    headers['Exp-Access-Token'] = accessToken;\n  }\n\n  let options = {\n    url,\n    method: method || 'get',\n    headers,\n  };\n\n  if (requestOptions) {\n    options = {\n      ...options,\n      ...requestOptions,\n    };\n  }\n\n  if (requestBody) {\n    options = {\n      ...options,\n      body: requestBody,\n      json: true,\n    };\n  }\n\n  let response = await request.promise(options);\n  let responseBody = response.body;\n  var responseObj;\n  if (_.isString(responseBody)) {\n    try {\n      responseObj = JSON.parse(responseBody);\n    } catch (e) {\n      throw new XDLError(ErrorCode.INVALID_JSON, \"Invalid JSON returned from API: \" + e + \". Response body: \" + responseBody);\n    }\n  } else {\n    responseObj = responseBody;\n  }\n  if (responseObj.err) {\n    let err = ApiError(responseObj.code || 'API_ERROR', \"API Response Error: \" + responseObj.err);\n    // $FlowFixMe can't add arbitrary properties to error\n    err.serverError = responseObj.err;\n    throw err;\n  } else {\n    return responseObj;\n  }\n}\n\nasync function _downloadAsync(url, path, progressFunction, retryFunction) {\n  let promptShown = false;\n  let currentProgress = 0;\n  let warningTimer = setTimeout(\n      () => {\n        if (retryFunction) {\n          retryFunction();\n        }\n        promptShown = true;\n      },\n    TIMER_DURATION\n  );\n\n  return new Promise((resolve, reject) => {\n    try {\n      progress(request(url, {timeout: TIMEOUT}, (err) => {\n        if (err !== null) {\n          if (err.code === 'ETIMEDOUT') {\n            reject(Error(\"Server timeout.\"));\n          } else {\n            reject(Error(\"Couldn't connect to the server, check your internet connection.\"));\n          }\n        }\n      }))\n        .on('progress', (progress) => {\n          const roundedProgress = Math.round(progress.percent * 100);\n          if (currentProgress !== roundedProgress) {\n            currentProgress = roundedProgress;\n            clearTimeout(warningTimer);\n            if (!promptShown) {\n              warningTimer = setTimeout(\n                  () => {\n                    if (retryFunction) {\n                      retryFunction();\n                    }\n                    promptShown = true;\n                  },\n                TIMER_DURATION\n              );\n            }\n          }\n          let percent = ((progress.percent !== undefined) ? progress.percent : 0);\n          if (progressFunction) {\n            progressFunction(percent);\n          }\n        })\n        .pipe(fs.createWriteStream(path))\n        .on('finish', () => {\n          // Since on('finish') overrides on('progress'), loading bar will never get to 100%\n          // this line fixes it.\n          if (progressFunction) {\n            progressFunction(100);\n          }\n          clearTimeout(warningTimer);\n          resolve();\n        })\n        .on('error', reject);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport default class ApiClient {\n  static host: string = Config.api.host;\n  static port: number = Config.api.port || 80;\n\n  static _versionCache = new Cacher(\n    async () => { return await ApiClient.callPathAsync('/--/versions'); },\n    'versions.json',\n  );\n\n  static _schemaCaches = {};\n\n  static async callMethodAsync(methodName: string, args: Array<*>, method: string, requestBody: ?Object, requestOptions: ?Object = {}): Promise<any> {\n    let url = API_BASE_URL + encodeURIComponent(methodName) + '/' +\n      encodeURIComponent(JSON.stringify(args));\n    return _callMethodAsync(url, method, requestBody, requestOptions);\n  }\n\n  static async callPathAsync(path, method, requestBody, requestOptions: ?Object = {}) {\n    let url = ROOT_BASE_URL + path;\n    return _callMethodAsync(url, method, requestBody, requestOptions);\n  }\n\n  static async versionsAsync() {\n    return await ApiClient._versionCache.getAsync();\n  }\n\n  static async xdlSchemaAsync(sdkVersion) {\n    if (!ApiClient._schemaCaches.hasOwnProperty(sdkVersion)) {\n      ApiClient._schemaCaches[sdkVersion] = new Cacher(\n        async () => { return await ApiClient.callPathAsync(`/--/xdl-schema/${sdkVersion}`); },\n        `schema-${sdkVersion}.json`,\n      );\n    }\n\n    return await ApiClient._schemaCaches[sdkVersion].getAsync();\n  }\n\n  static async sdkVersionsAsync() {\n    let versions = await ApiClient.versionsAsync();\n    return versions.sdkVersions;\n  }\n\n  static async downloadAsync(url, outputPath, options = {}, progressFunction, retryFunction) {\n    if (options.extract) {\n      let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n      let tmpPath = path.join(dotExpoHomeDirectory, 'tmp-download-file');\n      await _downloadAsync(url, tmpPath);\n      await Extract.extractAsync(tmpPath, outputPath);\n      rimraf.sync(tmpPath);\n    } else {\n      await _downloadAsync(url, outputPath, progressFunction, retryFunction);\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}