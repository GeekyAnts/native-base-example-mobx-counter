{"version":3,"sources":["detach/IosPodsTools.js"],"names":["async","pathToTemplate","pathToOutput","moreSubstitutions","sdkVersion","let","templatesDirectory","path","dirname","templateString","await","fs","promise","readFile","reactNativePath","REACT_NATIVE_PATH","rnDependencyOptions","versionedDependencies","renderVersionedReactNativeDependenciesAsync","versionedPostinstalls","renderVersionedReactNativePostinstallsAsync","podDependencies","renderPodDependenciesAsync","join","isPodfile","substitutions","EXPONENT_CLIENT_DEPS","PODFILE_UNVERSIONED_RN_DEPENDENCY","renderUnversionedReactNativeDependency","PODFILE_UNVERSIONED_POSTINSTALL","renderUnversionedPostinstall","PODFILE_DETACHED_POSTINSTALL","renderDetachedPostinstall","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_VERSIONED_POSTINSTALLS","PODFILE_TEST_TARGET","renderPodfileTestTarget","result","key","hasOwnProperty","replacement","replace","RegExp","writeFile","renderPodfileAsync","dependencies","IOS_EXPONENT_CLIENT_VERSION","renderExponentViewPodspecAsync","concatTemplateFilesInDirectoryAsync","directory","templateFilenames","glob","templateStrings","Promise","all","map","filename","push","dependenciesConfigPath","options","readAsync","type","depsStrings","dependency","name","version","indentString","renderUnversionedReactDependency","renderUnversionedYogaDependency","attributes","Error","subspecs","renderDependencyAttributes","attributesStrings","Object","keys","value","JSON","stringify","podName","podsRootSub"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport glob from 'glob';\nimport indentString from 'indent-string';\nimport 'instapromise';\nimport JsonFile from '@exponent/json-file';\nimport path from 'path';\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, EXPONENT_ROOT_PATH, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(pathToTemplate, pathToOutput, moreSubstitutions, sdkVersion = 'UNVERSIONED') {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.promise.readFile(pathToTemplate, 'utf8');\n\n  let reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  let versionedDependencies = await renderVersionedReactNativeDependenciesAsync(templatesDirectory);\n  let versionedPostinstalls = await renderVersionedReactNativePostinstallsAsync(templatesDirectory);\n  let podDependencies = await renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: renderUnversionedReactNativeDependency(rnDependencyOptions, sdkVersion),\n    PODFILE_UNVERSIONED_POSTINSTALL: renderUnversionedPostinstall(),\n    PODFILE_DETACHED_POSTINSTALL: renderDetachedPostinstall(sdkVersion),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_VERSIONED_POSTINSTALLS: versionedPostinstalls,\n    PODFILE_TEST_TARGET: renderPodfileTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n\n  let result = templateString;\n  for (let key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      let replacement = substitutions[key];\n      result = result.replace(new RegExp(`\\\\\\$\\\\\\{${key}\\\\\\}`, 'g'), replacement);\n    }\n  }\n\n  await fs.promise.writeFile(pathToOutput, result);\n}\n\nasync function renderExponentViewPodspecAsync(pathToTemplate, pathToOutput, moreSubstitutions) {\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.promise.readFile(pathToTemplate, 'utf8');\n  let dependencies = await renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(/\\$\\{IOS_EXPONENT_VIEW_DEPS\\}/g, dependencies);\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(/\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g, moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION);\n  }\n\n  await fs.promise.writeFile(pathToOutput, result);\n}\n\nfunction renderUnversionedReactNativeDependency(options, sdkVersion) {\n  if (sdkVersion === '14.0.0') {\n    return indentString(`\n${renderUnversionedReactDependency(options)}\n`, 2);\n  } else {\n    return indentString(`\n${renderUnversionedReactDependency(options)}\n${renderUnversionedYogaDependency(options)}\n`, 2);\n  }\n}\n\nfunction renderUnversionedReactDependency(options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: options.reactNativePath,\n    };\n  } else {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n\n  attributes.subspecs = [\n    'Core',\n    'ART',\n    'RCTActionSheet',\n    'RCTAnimation',\n    'RCTCameraRoll',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n  ];\n\n  return `pod 'React',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction renderUnversionedYogaDependency(options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(options.reactNativePath, 'ReactCommon', 'yoga'),\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod 'Yoga',\n${indentString(renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction renderDependencyAttributes(attributes) {\n  let attributesStrings = [];\n  for (let key of Object.keys(attributes)) {\n    let value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nasync function renderVersionedReactNativeDependenciesAsync(templatesDirectory) {\n  // TODO: write these files with versioning script\n  return concatTemplateFilesInDirectoryAsync(path.join(templatesDirectory, 'versioned-react-native', 'dependencies'));\n}\n\nasync function renderVersionedReactNativePostinstallsAsync(templatesDirectory) {\n  // TODO: write these files with versioning script\n  return concatTemplateFilesInDirectoryAsync(path.join(templatesDirectory, 'versioned-react-native', 'postinstalls'));\n}\n\nasync function concatTemplateFilesInDirectoryAsync(directory) {\n  let templateFilenames = await glob.promise(path.join(directory, '*.rb'));\n  let templateStrings = [];\n  await Promise.all(templateFilenames.map(async (filename) => {\n    let templateString = await fs.promise.readFile(filename, 'utf8');\n    if (templateString) {\n      templateStrings.push(templateString);\n    }\n  }));\n  return templateStrings.join('\\n');\n}\n\nfunction renderDetachedPostinstall(sdkVersion) {\n  let podName = sdkVersion === '14.0.0' ? 'ExponentView' : 'ExpoKit';\n\n  let podsRootSub = \"${PODS_ROOT}\";\n  return `\n    if target.pod_name == '${podName}'\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n        # needed for GoogleMaps 2.x\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'\n      end\n    end\n`;\n}\n\nfunction renderUnversionedPostinstall() {\n  return `\n    # Build React Native with RCT_DEV enabled\n    next unless target.pod_name == 'React'\n    target.native_target.build_configurations.each do |config|\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_DEV=1'\n    end\n`;\n}\n\nfunction renderPodfileTestTarget(reactNativePath) {\n  return `\n  # if you run into problems pre-downloading this, rm Pods/Local\\ Podspecs/RCTTest.podspec.json\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n    pod 'RCTTest', :podspec => './RCTTest.podspec', :path => '${reactNativePath}'\n  end\n`;\n}\n\nasync function renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  let dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  let type = (options.isPodfile) ? 'pod' : 's.dependency';\n  let depsStrings = dependencies.map((dependency) => `  ${type} '${dependency.name}', '${dependency.version}'`);\n  return depsStrings.join('\\n');\n}\n\nexport {\n  renderExponentViewPodspecAsync,\n  renderPodfileAsync,\n};\n"],"sourceRoot":"/xdl/src"}