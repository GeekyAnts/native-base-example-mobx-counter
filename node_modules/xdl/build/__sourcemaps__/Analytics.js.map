{"version":3,"sources":["Analytics.js"],"names":["setSegmentNodeKey","setSegmentWebInstance","setUserProperties","setVersionName","logEvent","let","_segmentNodeInstance","_segmentWebInstance","_userId","_version","PLATFORM_TO_ANALYTICS_PLATFORM","key","instance","userId","traits","identify","context","_getContext","window","analytics","version","amplitude","getInstance","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app"],"mappings":";;;;;QAkBgBA,iB,GAAAA,iB;QAIAC,qB,GAAAA,qB;QAIAC,iB,GAAAA,iB;QAqBAC,c,GAAAA,c;QASAC,Q,GAAAA,Q;;;;AApDhB;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEAC,IAAIC,oBAAJD;;AACAA,IAAIE,mBAAJF;AACAA,IAAIG,OAAJH;AACAA,IAAII,QAAJJ;AACA,MAAMK,iCAAiC;AACrC,YAAU,KAD2B;AAErC,WAAS,SAF4B;AAGrC,WAAS;AAH4B,CAAvC;;AAMO,SAASV,iBAAT,CAA2BW,GAA3B,EAAwC;AAC7CL,yBAAuB,sDAAYK,GAAZ,CAAvBL;AACF;;AAEO,SAASL,qBAAT,CAA+BW,QAA/B,EAA8C;AACnDL,wBAAsBK,QAAtBL;AACF;;AAEO,SAASL,iBAAT,CAA2BW,MAA3B,EAA2CC,MAA3C,EAAwD;AAC7DN,YAAUK,MAAVL;;AAEA,MAAIF,oBAAJ,EAA0B;AACxBA,yBAAqBS,QAArBT,CAA8B;AAC5BO,YAD4B;AAE5BC,YAF4B;AAG5BE,eAASC;AAHmB,KAA9BX;AAKF;;AAEA,MAAIC,mBAAJ,EAAyB;AACvB;AACAJ,mBAAeM,QAAfN;;AAEAe,WAAOC,SAAPD,CAAiBH,QAAjBG,CAA0BL,MAA1BK,EAAkCJ,MAAlCI,EAA0C;AACxCF,eAASC;AAD+B,KAA1CC;AAGF;AACF;;AAEO,SAASf,cAAT,CAAwBiB,OAAxB,EAAyC;AAC9CX,aAAWW,OAAXX;;AAEA,MAAIF,uBAAuBW,OAAOG,SAA9Bd,IAA2CW,OAAOG,SAAPH,CAAiBI,WAA5Df,IAA2EW,OAAOG,SAAPH,CAAiBI,WAAjBJ,EAA/E,EAA+G;AAC7G;AACAA,WAAOG,SAAPH,CAAiBI,WAAjBJ,GAA+Bf,cAA/Be,CAA8CE,OAA9CF;AACF;AACF;;AAEO,SAASd,QAAT,CAAkBmB,IAAlB,EAAgCC,aAAkB,EAAlD,EAAsD;AAC3D,MAAIlB,wBAAwBE,OAA5B,EAAqC;AACnCF,yBAAqBmB,KAArBnB,CAA2B;AACzBO,cAAQL,OADiB;AAEzBkB,aAAOH,IAFkB;AAGzBC,gBAHyB;AAIzBR,eAASC;AAJgB,KAA3BX;AAMF;;AAEA,MAAIC,mBAAJ,EAAyB;AACvB;AACAJ,mBAAeM,QAAfN;;AAEAe,WAAOC,SAAPD,CAAiBO,KAAjBP,CAAuBK,IAAvBL,EAA6BM,UAA7BN,EAAyC;AACvCF,eAASC;AAD8B,KAAzCC;AAGF;AACF;;AAEA,SAASD,WAAT,GAAuB;AACrBZ,MAAIsB,WAAWjB,+BAA+BkB,YAAGD,QAAHC,EAA/BlB,CAAfL;AACAA,MAAIW,UAAU;AACZa,QAAIA,4BAAGC,OAAHD,EADQ;AAEZE,YAAQ;AACNC,aAAOL,QADD;AAENM,aAAON;AAFD,KAFI;AAMZC,QAAI;AACFL,YAAMI,QADJ;AAEFP,eAASQ,YAAGM,OAAHN;AAFP,KANQ;AAUZO,SAAK;AAVO,GAAd9B;;AAaA,MAAII,QAAJ,EAAc;AACZO,YAAQmB,GAARnB,GAAc;AACZI,eAASX;AADG,KAAdO;AAGF;;AAEA,SAAOA,OAAP;AACF","file":"../Analytics.js","sourcesContent":["/**\n * @flow\n */\n\nimport ip from 'ip';\nimport os from 'os';\nimport Segment from 'analytics-node';\n\nlet _segmentNodeInstance;\nlet _segmentWebInstance;\nlet _userId;\nlet _version;\nconst PLATFORM_TO_ANALYTICS_PLATFORM = {\n  'darwin': 'Mac',\n  'win32': 'Windows',\n  'linux': 'Linux',\n};\n\nexport function setSegmentNodeKey(key: string) {\n  _segmentNodeInstance = new Segment(key);\n}\n\nexport function setSegmentWebInstance(instance: any) {\n  _segmentWebInstance = instance;\n}\n\nexport function setUserProperties(userId: string, traits: any) {\n  _userId = userId;\n\n  if (_segmentNodeInstance) {\n    _segmentNodeInstance.identify({\n      userId,\n      traits,\n      context: _getContext(),\n    });\n  }\n\n  if (_segmentWebInstance) {\n    // The Amplitude SDK isn't initialized right away, so call setVersion before every call to make sure it's actually updated.\n    setVersionName(_version);\n\n    window.analytics.identify(userId, traits, {\n      context: _getContext(),\n    });\n  }\n}\n\nexport function setVersionName(version: string) {\n  _version = version;\n\n  if (_segmentWebInstance && window.amplitude && window.amplitude.getInstance && window.amplitude.getInstance()) {\n    // Segment injects amplitude into the window. Call this manually because Segment isn't passing it along.\n    window.amplitude.getInstance().setVersionName(version);\n  }\n}\n\nexport function logEvent(name: string, properties: any = {}) {\n  if (_segmentNodeInstance && _userId) {\n    _segmentNodeInstance.track({\n      userId: _userId,\n      event: name,\n      properties,\n      context: _getContext(),\n    });\n  }\n\n  if (_segmentWebInstance) {\n    // The Amplitude SDK isn't initialized right away, so call setVersion before every call to make sure it's actually updated.\n    setVersionName(_version);\n\n    window.analytics.track(name, properties, {\n      context: _getContext(),\n    });\n  }\n}\n\nfunction _getContext() {\n  let platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()];\n  let context = {\n    ip: ip.address(),\n    device: {\n      model: platform,\n      brand: platform,\n    },\n    os: {\n      name: platform,\n      version: os.release(),\n    },\n    app: {},\n  };\n\n  if (_version) {\n    context.app = {\n      version: _version,\n    };\n  }\n\n  return context;\n}\n"],"sourceRoot":"/xdl/src"}