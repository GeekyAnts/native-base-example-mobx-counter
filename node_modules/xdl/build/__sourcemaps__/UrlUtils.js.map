{"version":3,"sources":["UrlUtils.js"],"names":["async","projectRoot","opts","requestHostname","constructUrlAsync","constructBundleUrlAsync","constructManifestUrlAsync","entryPoint","ext","let","bundleUrl","await","hostType","urlType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","dev","minify","constructUrlWithExtensionAsync","constructPublishUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","encodeURIComponent","hasOwnProperty","strict","exp","pkg","ProjectUtils","readConfigJsonAsync","sdkPkg","dependencies","pluginModule","supportsAssetPlugins","Versions","gteSdkVersion","isPackager","urlRandomnessSchema","Config","offline","joi","string","optional","allow","schema","object","keys","any","valid","lanType","boolean","urlRandomness","promise","validate","e","ErrorCode","INVALID_OPTIONS","toString","defaultOpts","ProjectSettings","getPackagerOptsAsync","Object","assign","packagerInfo","readPackagerInfoAsync","protocol","detach","scheme","hostname","port","packagerPort","expoServerPort","process","env","EXPO_PACKAGER_HOSTNAME","REACT_NATIVE_PACKAGER_HOSTNAME","ip","address","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","pnu","url","parse","url_","Error","randomIdentifier","sevenDigitIdentifier","randomIdentifierForUser","someRandomness","domainify","getPlatformSpecificBundleUrl","replace","length","alphabet","result","i","j","Math","floor","random","c","substr","username","join","s","toLowerCase","platform","includes","Exp","ENTRY_POINT_PLATFORM_TEMPLATE_STRING"],"mappings":"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","file":"../UrlUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport ip from 'ip';\nimport joi from 'joi';\nimport os from 'os';\nimport url from 'url';\n\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\n\nexport async function constructBundleUrlAsync(projectRoot: string, opts: any, requestHostname?: string) {\n  return constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(projectRoot: string, opts: any, requestHostname?: string) {\n  return constructUrlAsync(projectRoot, opts, false, requestHostname);\n}\n\nexport async function constructUrlWithExtensionAsync(projectRoot: string, entryPoint: string, ext: string, requestHostname?: string) {\n  let bundleUrl = await constructBundleUrlAsync(projectRoot, {\n    hostType: 'localhost',\n    urlType: 'http',\n  }, requestHostname);\n\n  let mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  let queryParams = await constructBundleQueryParamsAsync(projectRoot, {\n    dev: false,\n    minify: true,\n  }, requestHostname);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(projectRoot: string, entryPoint: string, requestHostname?: string) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'bundle', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(projectRoot: string, entryPoint: string, requestHostname?: string) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(projectRoot: string, requestHostname?: string) {\n  return constructUrlAsync(projectRoot, {\n    urlType: 'no-protocol',\n  }, true, requestHostname);\n}\n\nexport async function constructBundleQueryParamsAsync(projectRoot: string, opts: any) {\n  let queryParams = `dev=${encodeURIComponent(!!opts.dev)}`;\n\n  if (opts.hasOwnProperty('strict')) {\n    queryParams += `&strict=${encodeURIComponent(!!opts.strict)}`;\n  }\n\n  if (opts.hasOwnProperty('minify')) {\n    queryParams += `&minify=${encodeURIComponent(!!opts.minify)}`;\n  }\n\n  queryParams += '&hot=false';\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  // Be backwards compatible for users who haven't migrated from `exponent`\n  // to the `expo` sdk package.\n  let sdkPkg = pkg.dependencies['expo'] ? 'expo' : 'exponent';\n  let pluginModule = `${sdkPkg}/tools/hashAssetFiles`;\n  queryParams += `&assetPlugin=${pluginModule}`;\n\n  // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n  // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n  let supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  if (!supportsAssetPlugins) {\n    queryParams += '&includeAssetFileHashes=true';\n  }\n\n  return queryParams;\n}\n\nexport async function constructUrlAsync(projectRoot: string, opts: any, isPackager: bool, requestHostname?: string) {\n  if (opts) {\n\n    // the randomness is only important if we're online and can build a tunnel\n    let urlRandomnessSchema;\n    if (Config.offline) {\n      urlRandomnessSchema = joi.string().optional().allow(null);\n    } else {\n      urlRandomnessSchema = joi.string();\n    }\n\n    let schema = joi.object().keys({\n      urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n      lanType: joi.any().valid('ip', 'hostname'),\n      hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n      dev: joi.boolean(),\n      strict: joi.boolean(),\n      minify: joi.boolean(),\n      urlRandomness: urlRandomnessSchema,\n    });\n\n    try {\n      await joi.promise.validate(opts, schema);\n    } catch (e) {\n      throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n    }\n  }\n\n  let defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    opts = defaultOpts;\n  } else {\n    opts = Object.assign(defaultOpts, opts);\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol;\n  if (opts.urlType === 'http') {\n    protocol = 'http';\n  } else if (opts.urlType === 'no-protocol') {\n    protocol = null;\n  } else {\n    protocol = 'exp';\n\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    if (exp.detach && exp.detach.scheme) {\n      protocol = exp.detach.scheme;\n    }\n  }\n\n  let hostname;\n  let port;\n\n  if (opts.hostType === 'localhost') {\n    hostname = 'localhost';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME;\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME;\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    let ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl) {\n      // use localhost\n      hostname = 'localhost';\n      port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n\n      // TODO report a warning when this is for a currently served project, suppress for status checks\n    } else {\n      let pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  let url_ = '';\n  if (protocol) {\n    url_ += `${protocol}://`;\n  }\n\n  if (!hostname) {\n    throw new Error('Hostname cannot be inferred.');\n  }\n\n  url_ += hostname;\n\n  if (port) {\n    url_ += `:${port}`;\n  }\n\n  if (opts.urlType === 'redirect') {\n    return `https://exp.host/--/to-exp/${encodeURIComponent(url_)}`;\n  }\n\n  return url_;\n}\n\nexport function guessMainModulePath(entryPoint: string) {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6) {\n  let alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * alphabet.length);\n    let c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier() {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string) {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness() {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string) {\n  return s.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n}\n\nexport function getPlatformSpecificBundleUrl(url: string, platform: string) {\n  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {\n    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);\n  } else {\n    return url;\n  }\n}\n"],"sourceRoot":"/xdl/src"}