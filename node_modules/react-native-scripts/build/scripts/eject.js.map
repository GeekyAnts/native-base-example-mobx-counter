{"version":3,"sources":["eject.js"],"names":["filesUsingExpoSdk","filesWithExpo","usingExpo","length","expoSdkWarning","bold","filename","cyan","yellow","console","log","italic","reactNativeOptionMessage","questions","type","name","message","default","choices","value","prompt","ejectMethod","exists","resolve","npmOrYarn","JSON","readFile","appJson","parse","pkgJson","newName","newDisplayName","displayName","expName","expo","stripDashes","validate","s","indexOf","enteredName","enteredDisplayname","writeFile","green","ejectCommand","ejectArgs","sync","stdio","status","red","process","exit","projectBabelPath","cwd","projectBabelRc","toString","templateBabelPath","__dirname","templateBabelRc","unlink","main","dependencies","devDependencies","scripts","start","ios","android","eject","lolThatsSomeComplexCode","error","findJavaScriptProjectFilesInRoot","projectJsFiles","all","map","f","buf","i","contents","jsFileContents","filesUsingExpo","requires","findAll","includes","push","sort","root","stat","stats","isFile","endsWith","isDirectory","readdir","children","join","jsFilesInChildren","concat","apply","ret","c","then","catch","e"],"mappings":"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","file":"eject.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fsp from 'fs-promise';\nimport inquirer from 'inquirer';\nimport matchRequire from 'match-require';\nimport path from 'path';\nimport spawn from 'cross-spawn';\n\nimport { detach } from '../util/expo';\n\nasync function eject() {\n  try {\n    const filesWithExpo = await filesUsingExpoSdk();\n    const usingExpo = filesWithExpo.length > 0;\n\n    let expoSdkWarning;\n    if (usingExpo) {\n      expoSdkWarning = `${chalk.bold('Warning!')} We found at least one file where your project imports the Expo SDK:\n`;\n\n      for (let filename of filesWithExpo) {\n        expoSdkWarning += `  ${chalk.cyan(filename)}\\n`;\n      }\n\n      expoSdkWarning += `\n${chalk.yellow.bold('If you choose the \"plain\" React Native option below, these imports will stop working.')}`;\n    } else {\n      expoSdkWarning = `\\\nWe didn't find any uses of the Expo SDK in your project, so you should be fine to eject to\n\"Plain\" React Native. (This check isn't very sophisticated, though.)`;\n    }\n\n    console.log(\n      `\n${expoSdkWarning}\n\nWe ${chalk.italic('strongly')} recommend that you read this document before you proceed:\n  ${chalk.cyan('https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md')}\n\nEjecting is permanent! Please be careful with your selection.\n`\n    );\n\n    let reactNativeOptionMessage = \"React Native: I'd like a regular React Native project.\";\n\n    if (usingExpo) {\n      reactNativeOptionMessage = chalk.italic(\n        \"(WARNING: See above message for why this option may break your project's build)\\n  \"\n      ) + reactNativeOptionMessage;\n    }\n\n    const questions = [\n      {\n        type: 'list',\n        name: 'ejectMethod',\n        message: 'How would you like to eject from create-react-native-app?',\n        default: usingExpo ? 'expoKit' : 'raw',\n        choices: [\n          {\n            name: reactNativeOptionMessage,\n            value: 'raw',\n          },\n          {\n            name: \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n            value: 'expoKit',\n          },\n          {\n            name: \"Cancel: I'll continue with my current project structure.\",\n            value: 'cancel',\n          },\n        ],\n      },\n    ];\n\n    const { ejectMethod } = await inquirer.prompt(questions);\n\n    if (ejectMethod === 'raw') {\n      const npmOrYarn = (await fsp.exists(path.resolve('yarn.lock'))) ? 'yarnpkg' : 'npm';\n      const appJson = JSON.parse(await fsp.readFile(path.resolve('app.json')));\n      const pkgJson = JSON.parse(await fsp.readFile(path.resolve('package.json')));\n      let {\n        name: newName,\n        displayName: newDisplayName,\n        expo: { name: expName },\n      } = appJson;\n\n      // we ask user to provide a project name (default is package name stripped of dashes)\n      // but we want to infer some good default choices, especially if they've set them up in app.json\n      if (!newName) {\n        newName = stripDashes(pkgJson.name);\n      }\n\n      if (!newDisplayName && expName) {\n        newDisplayName = expName;\n      }\n\n      console.log(\n        \"We have a couple of questions to ask you about how you'd like to name your app:\"\n      );\n      const { enteredName, enteredDisplayname } = await inquirer.prompt([\n        {\n          name: 'enteredDisplayname',\n          message: \"What should your app appear as on a user's home screen?\",\n          default: newDisplayName,\n          validate: s => {\n            return s.length > 0;\n          },\n        },\n        {\n          name: 'enteredName',\n          message: 'What should your Android Studio and Xcode projects be called?',\n          default: newName,\n          validate: s => {\n            return s.length > 0 && s.indexOf('-') === -1 && s.indexOf(' ') === -1;\n          },\n        },\n      ]);\n\n      appJson.name = enteredName;\n      appJson.displayName = enteredDisplayname;\n\n      console.log('Writing your selections to app.json...');\n      // write the updated app.json file\n      await fsp.writeFile(path.resolve('app.json'), JSON.stringify(appJson, null, 2));\n      console.log(chalk.green('Wrote to app.json, please update it manually in the future.'));\n\n      const ejectCommand = 'node';\n      const ejectArgs = [\n        path.resolve('node_modules', 'react-native', 'local-cli', 'cli.js'),\n        'eject',\n      ];\n\n      const { status } = spawn.sync(ejectCommand, ejectArgs, {\n        stdio: 'inherit',\n      });\n\n      if (status !== 0) {\n        console.log(\n          chalk.red(`Eject failed with exit code ${status}, see above output for any issues.`)\n        );\n        console.log(chalk.yellow('You may want to delete the `ios` and/or `android` directories.'));\n        process.exit(1);\n      } else {\n        console.log('Successfully copied template native code.');\n      }\n\n      // if the project .babelrc matches the template one, then we don't need to have it around anymore\n      // if it doesn't, then print a warning\n      try {\n        const projectBabelPath = path.resolve(process.cwd(), '.babelrc');\n        const projectBabelRc = (await fsp.readFile(projectBabelPath)).toString();\n\n        const templateBabelPath = path.resolve(__dirname, '..', '..', 'template', '.babelrc');\n        const templateBabelRc = (await fsp.readFile(templateBabelPath)).toString();\n\n        if (projectBabelRc === templateBabelRc) {\n          await fsp.unlink(projectBabelPath);\n          console.log(\n            chalk.green(\n              `The template .babelrc is no longer necessary after ejecting.\nIt has been successfully deleted.`\n            )\n          );\n        } else {\n          console.log(\n            chalk.yellow(\n              `It looks like you modified your .babelrc file.\nMake sure to change your babel preset to \\`react-native\\`.`\n            )\n          );\n        }\n      } catch (e) {\n        console.log(\n          chalk.yellow(\n            `We had an issue preparing your .babelrc for ejection.\nIf you have a .babelrc in your project, make sure to change the preset to \\`react-native\\`.`\n          )\n        );\n        console.log(chalk.red(e));\n      }\n\n      delete pkgJson.main;\n\n      // NOTE: expo won't work after performing a raw eject, so we should delete this\n      // it will be a better error message for the module to not be found than for whatever problems\n      // missing native modules will cause\n      delete pkgJson.dependencies.expo;\n      delete pkgJson.devDependencies['react-native-scripts'];\n\n      pkgJson.scripts.start = 'react-native start';\n      pkgJson.scripts.ios = 'react-native run-ios';\n      pkgJson.scripts.android = 'react-native run-android';\n\n      // no longer relevant to an ejected project (maybe build is?)\n      delete pkgJson.scripts.eject;\n\n      console.log(`Updating your ${npmOrYarn} scripts in package.json...`);\n\n      await fsp.writeFile(path.resolve('package.json'), JSON.stringify(pkgJson, null, 2));\n\n      console.log(chalk.green('Your package.json is up to date!'));\n\n      // FIXME now we need to provide platform-specific entry points until upstream uses a single one\n      console.log(`Adding platform-specific entry points...`);\n\n      const lolThatsSomeComplexCode = `import { AppRegistry } from 'react-native';\nimport App from './App';\nAppRegistry.registerComponent('${newName}', () => App);\n`;\n\n      await fsp.writeFile(path.resolve('index.ios.js'), lolThatsSomeComplexCode);\n      await fsp.writeFile(path.resolve('index.android.js'), lolThatsSomeComplexCode);\n\n      console.log(chalk.green('Added new entry points!'));\n\n      console.log(\n        `\nNote that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or\nAndroid Studio to build the native code for your project.`\n      );\n\n      console.log(\n        chalk.yellow(\n          `\nIt's recommended to delete your node_modules directory and rerun ${npmOrYarn}\nto ensure that the changes we made to package.json persist correctly.\n`\n        )\n      );\n    } else if (ejectMethod === 'expoKit') {\n      await detach();\n    } else {\n      // we don't want to print the survey for cancellations\n      console.log('OK! If you change your mind you can run this command again.');\n      return;\n    }\n\n    console.log(\n      `${chalk.green('Ejected successfully!')}\nPlease consider letting us know why you ejected in this survey:\n  ${chalk.cyan('https://goo.gl/forms/iD6pl218r7fn9N0d2')}`\n    );\n  } catch (e) {\n    console.error(chalk.red(`Error running eject: ${e}`));\n  }\n}\n\nasync function filesUsingExpoSdk(): Promise<Array<string>> {\n  const projectJsFiles = await findJavaScriptProjectFilesInRoot(process.cwd());\n\n  const jsFileContents = (await Promise.all(\n    projectJsFiles.map(f => fsp.readFile(f))\n  )).map((buf, i) => {\n    return {\n      filename: projectJsFiles[i],\n      contents: buf.toString(),\n    };\n  });\n\n  const filesUsingExpo = [];\n\n  for (let { filename, contents } of jsFileContents) {\n    const requires = matchRequire.findAll(contents);\n\n    if (requires.includes('expo')) {\n      filesUsingExpo.push(filename);\n    }\n  }\n\n  filesUsingExpo.sort();\n\n  return filesUsingExpo;\n}\n\nfunction stripDashes(s: string): string {\n  let ret = '';\n\n  for (let c of s) {\n    if (c !== ' ' && c !== '-') {\n      ret += c;\n    }\n  }\n\n  return ret;\n}\n\nasync function findJavaScriptProjectFilesInRoot(root: string): Promise<Array<string>> {\n  // ignore node_modules\n  if (root.includes('node_modules')) {\n    return [];\n  }\n\n  const stats = await fsp.stat(root);\n\n  if (stats.isFile()) {\n    if (root.endsWith('.js')) {\n      return [root];\n    } else {\n      return [];\n    }\n  } else if (stats.isDirectory()) {\n    const children = await fsp.readdir(root);\n\n    // we want to do this concurrently in large project folders\n    const jsFilesInChildren = await Promise.all(\n      children.map(f => findJavaScriptProjectFilesInRoot(path.join(root, f)))\n    );\n\n    return [].concat.apply([], jsFilesInChildren);\n  } else {\n    // lol it's not a file or directory, we can't return a honey badger, 'cause it don't give a\n    return [];\n  }\n}\n\neject()\n  .then(() => {\n    // the expo local github auth server leaves a setTimeout for 5 minutes\n    // so we need to explicitly exit (for now, this will be resolved in the nearish future)\n    process.exit(0);\n  })\n  .catch(e => {\n    console.error(`Problem running eject: ${e}`);\n    process.exit(1);\n  });\n"]}